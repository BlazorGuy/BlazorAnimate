@page "/"

@using BlazorAnimate.Services;
@using BlazorAnimate.Models;

@inject BezierCurveService bcs;
@inject AnimationService animationservice;

    <style>
        .content.px-4{
            padding:0px !important;
        }
    </style>


    <div class="row" style="margin-bottom:15px">
        <div class="col-sm-1">
            <button type="button" class="btn btn-primary" @onclick="Restart">Restart</button>
        </div>
        <div class="col-sm-1">
            <div class="custom-control custom-checkbox" style="padding-top:15px">
                <input type="checkbox" class="custom-control-input" id="ShowPaths" @onchange="ToggleDrawPaths">
                <label class="custom-control-label" for="ShowPaths">Show Paths</label>
            </div>
        </div>
        <div class="col-sm-10">
            <div class="custom-control custom-checkbox" style="padding-top:15px">
                <input type="checkbox" class="custom-control-input" id="ToggleLoopBack" @onchange="ToggleLoopBack">
                <label class="custom-control-label" for="ToggleLoopBack">Reverse Loop</label>
            </div>
        </div>
    </div>
<div class="row">
    <div class="col-sm">
        <BECanvas Width="700" Height="600" @ref="_canvasReference"></BECanvas>
    </div>
</div>



@code{
    private Canvas2DContext ctx;
    private List<Animation> Animations = new List<Animation>();

    protected BECanvasComponent _canvasReference;

    private int fps = 60;
    private bool drawpath = false;
    private bool loopback = false;
    private string backgroundcolor = "#454545";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        ctx = await _canvasReference.CreateCanvas2DAsync();

        var animation = new Animation();
        var animation_l = new Animation();
        var animation_r = new Animation();

        animation_l.Speed = 1.1F;
        animation_r.Speed = 1.5F;

        animation.Words.Add(new Word()
        {
            TextString = "B",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(10, 305),
                ControlPoint1 = new PointF(-10, 164),
                ControlPoint2 = new PointF(245, 166),
                EndPoint = new PointF(235, 300)
            },
            DrawPath = drawpath,
            Color = "#ffb6b3"
        }); ;

        animation.Words.Add(new Word()
        {
            TextString = "rowser",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(53, 300),
                ControlPoint1 = new PointF(35, 300),
                ControlPoint2 = new PointF(35, 300),
                EndPoint = new PointF(35, 900)
            },
            DrawPath = drawpath,
        });

        animation.Words.Add(new Word()
        {
            TextString = "+",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(280, 300),
                ControlPoint1 = new PointF(70, 300),
                ControlPoint2 = new PointF(70, 300),
                EndPoint = new PointF(100, 1300)
            },
            DrawPath = drawpath
        });

        animation_r.Words.Add(new Word()
        {
            TextString = "R",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(320, 300),
                ControlPoint1 = new PointF(350, 300),
                ControlPoint2 = new PointF(350, 300),
                EndPoint = new PointF(350, 900)
            },
            DrawPath = drawpath
        });

        animation.Words.Add(new Word()
        {
            TextString = "azor",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(370, 300),
                ControlPoint1 = new PointF(350, 300),
                ControlPoint2 = new PointF(350, 300),
                EndPoint = new PointF(295, 300)
            },
            DrawPath = drawpath,
            Color = "#ffb6b3"
        });

        animation_l.Words.Add(new Word()
        {
            TextString = "l",
            Path = new BezierCurve()
            {
                StartPoint = new PointF(800, 900),
                ControlPoint1 = new PointF(-10, 164),
                ControlPoint2 = new PointF(245, 166),
                EndPoint = new PointF(280, 300)
            },
            DrawPath = drawpath,
            Color = "#ffb6b3"
        });

        Animations.Add(animation);
        Animations.Add(animation_l);
        Animations.Add(animation_r);

        animate();

        await Task.Delay(2000).ContinueWith(async a => {
            await SetInterval(() => animate(), TimeSpan.FromMilliseconds(1000 / fps));
        });
    }

    async Task SetInterval(Action action, TimeSpan timeout)
    {
        await Task.Delay(timeout).ConfigureAwait(false);

        action();

        await SetInterval(action, timeout);
    }

    async void animate()
    {
        await ctx.ClearRectAsync(0, 0, 700, 600);
        await ctx.SetFillStyleAsync(backgroundcolor);
        await ctx.FillRectAsync(0, 0, 700, 600);

        bool allcomplete = true;

        foreach (Animation a in Animations)
        {
            animationservice.Animate(a);
            animationservice.Draw(ctx,a);
            if (a.Percent != 100 && a.Percent !=0) allcomplete = false;
        }

        if (allcomplete && loopback)
            Animations.ForEach(a => a.Speed *= -1);
    }

    void Restart(){
        Animations.ForEach(a => a.Percent = 0);
    }

    void ToggleLoopBack()
    {
        loopback = !loopback;
    }

    void ToggleDrawPaths()
    {
        Animations.ForEach(a => a.Words.ForEach(w=>w.DrawPath = !w.DrawPath));
    }
}